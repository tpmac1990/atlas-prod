# Generated by Django 3.1.2 on 2021-12-31 06:33

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('_id', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('rating', models.IntegerField()),
                ('read', models.BooleanField(default=False)),
                ('user', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeologicalProvince',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('ptype', models.CharField(blank=True, max_length=70, null=True)),
                ('rank', models.CharField(blank=True, max_length=70, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeologicalProvinceSpatial',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('ptype', models.CharField(blank=True, max_length=70, null=True)),
                ('rank', models.CharField(blank=True, max_length=70, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4202)),
            ],
        ),
        migrations.CreateModel(
            name='GovernmentRegion',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='GovernmentRegionSpatial',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4202)),
            ],
        ),
        migrations.CreateModel(
            name='Holder',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, unique=True)),
                ('user_name', models.CharField(max_length=20)),
                ('valid_relations', models.BooleanField(default=False)),
                ('valid_instance', models.BooleanField(default=False)),
                ('user_edit', models.BooleanField(default=True)),
                ('date_modified', models.DateField(auto_now=True)),
                ('date_created', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='KeepPosted',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('submitted_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LocalGovernment',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70)),
            ],
        ),
        migrations.CreateModel(
            name='LocalGovernmentSpatial',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4202)),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='MaterialCategory',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccDeleteRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ind', models.IntegerField()),
                ('user_name', models.CharField(max_length=20)),
                ('comment', models.TextField()),
                ('reviewed', models.BooleanField(blank=True, default=False)),
                ('outcome', models.TextField(blank=True)),
                ('date_modified', models.DateField(auto_now=True)),
                ('date_created', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='OccName',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=130, unique=True)),
                ('user_name', models.CharField(max_length=20)),
                ('valid_instance', models.BooleanField(default=False)),
                ('date_created', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='OccOriginalID',
            fields=[
                ('_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=20)),
                ('valid_instance', models.BooleanField(default=False)),
                ('date_created', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='OccSize',
            fields=[
                ('_id', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='OccStatus',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('original', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccStatusSimp',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccType',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('original', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OccTypeSimp',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('ind', models.IntegerField(primary_key=True, serialize=False)),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4202)),
                ('user_name', models.CharField(max_length=20)),
                ('valid_relations', models.BooleanField(default=False)),
                ('valid_instance', models.BooleanField(default=False)),
                ('user_edit', models.BooleanField(default=False)),
                ('date_modified', models.DateField(auto_now=True)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('geoprovince', models.ManyToManyField(blank=True, related_name='geoprovince_occurrence', to='gp.GeologicalProvince')),
                ('govregion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='govregion_occurrence', to='gp.governmentregion')),
                ('localgov', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='localgov_occurrence', to='gp.localgovernment')),
                ('majmat', models.ManyToManyField(blank=True, related_name='majmat_occurrence', to='gp.Material')),
                ('minmat', models.ManyToManyField(blank=True, related_name='minmat_occurrence', to='gp.Material')),
                ('name', models.ManyToManyField(blank=True, related_name='name_occurrence', to='gp.OccName')),
                ('oid', models.ManyToManyField(blank=True, related_name='oid_occurrence', to='gp.OccOriginalID')),
                ('size', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='size_occurrence', to='gp.occsize')),
            ],
        ),
        migrations.CreateModel(
            name='Shore',
            fields=[
                ('_id', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('_id', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='StateSpatial',
            fields=[
                ('_id', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4202)),
            ],
        ),
        migrations.CreateModel(
            name='TenAct',
            fields=[
                ('_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70)),
                ('state', models.CharField(max_length=10)),
                ('link', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tenement',
            fields=[
                ('ind', models.IntegerField(primary_key=True, serialize=False)),
                ('lodgedate', models.DateField()),
                ('startdate', models.DateField()),
                ('enddate', models.DateField()),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4202)),
                ('valid_relations', models.BooleanField(default=False)),
                ('user_edit', models.BooleanField(default=False)),
                ('date_modified', models.DateField(auto_now=True)),
                ('geoprovince', models.ManyToManyField(blank=True, related_name='geoprovince_tenement', to='gp.GeologicalProvince')),
                ('govregion', models.ManyToManyField(blank=True, related_name='govregion_tenement', to='gp.GovernmentRegion')),
            ],
        ),
        migrations.CreateModel(
            name='TenOriginalID',
            fields=[
                ('_id', models.CharField(max_length=22, primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=20)),
                ('valid_instance', models.BooleanField(default=False)),
                ('date_created', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TenStatusSimp',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70)),
            ],
        ),
        migrations.CreateModel(
            name='TenTypeSimp',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='UserLogOn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(max_length=100)),
                ('open_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TenType',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('original', models.CharField(max_length=70)),
                ('act', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='act_tentype', to='gp.tenact')),
                ('simple', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_tentype', to='gp.tentypesimp')),
            ],
        ),
        migrations.CreateModel(
            name='TenStatus',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('original', models.CharField(max_length=100)),
                ('simple', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_tenstatus', to='gp.tenstatussimp')),
            ],
        ),
        migrations.CreateModel(
            name='TenHolder',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('percown', models.FloatField()),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='name_tenholder', to='gp.holder')),
                ('tenement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenement_tenholder', to='gp.tenement')),
            ],
        ),
        migrations.CreateModel(
            name='TenementRemoval',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('ind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_inactive', to='gp.tenement')),
            ],
        ),
        migrations.CreateModel(
            name='TenementChange',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=6)),
                ('field', models.CharField(max_length=30)),
                ('lodgedateval', models.DateField(blank=True, null=True)),
                ('startdateval', models.DateField(blank=True, null=True)),
                ('enddateval', models.DateField(blank=True, null=True)),
                ('holderperc', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('user', models.CharField(max_length=20)),
                ('date_created', models.DateField()),
                ('geoprovinceval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='geoprovinceval_tenement', to='gp.geologicalprovince')),
                ('holderval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='holderval_tenement', to='gp.tenholder')),
                ('ind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_change', to='gp.tenement')),
                ('oidval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='oidval_tenement', to='gp.tenoriginalid')),
                ('statusval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='statusval_tenement', to='gp.tenstatus')),
                ('typeval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='typeval_tenement', to='gp.tentype')),
            ],
        ),
        migrations.CreateModel(
            name='TenementAddition',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('ind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_addition', to='gp.tenement')),
            ],
        ),
        migrations.AddField(
            model_name='tenement',
            name='holder',
            field=models.ManyToManyField(blank=True, related_name='holder_tenement', through='gp.TenHolder', to='gp.Holder'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='localgov',
            field=models.ManyToManyField(blank=True, related_name='localgov_tenement', to='gp.LocalGovernment'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='majmat',
            field=models.ManyToManyField(blank=True, related_name='majmat_tenement', to='gp.Material'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='minmat',
            field=models.ManyToManyField(blank=True, related_name='minmat_tenement', to='gp.Material'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='occurrence',
            field=models.ManyToManyField(blank=True, related_name='occurrence_tenement', to='gp.Occurrence'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='oid',
            field=models.ManyToManyField(blank=True, related_name='oid_tenement', to='gp.TenOriginalID'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='shore',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shore_tenement', to='gp.shore'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='state_tenement', to='gp.state'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_tenement', to='gp.tenstatus'),
        ),
        migrations.AddField(
            model_name='tenement',
            name='typ',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='typ_tenement', to='gp.tentype'),
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('percown', models.FloatField()),
                ('child', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_parent', to='gp.holder')),
                ('name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='name_parent', to='gp.holder')),
            ],
        ),
        migrations.CreateModel(
            name='OccurrenceRemoval',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('ind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_inactive', to='gp.occurrence')),
            ],
        ),
        migrations.CreateModel(
            name='OccurrenceChange',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=6)),
                ('field', models.CharField(max_length=30)),
                ('user', models.CharField(max_length=20)),
                ('date_created', models.DateField()),
                ('geoprovinceval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='geoprovinceval_occurrence', to='gp.geologicalprovince')),
                ('ind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_change', to='gp.occurrence')),
                ('majmatval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='majmatval_occurrence', to='gp.material')),
                ('minmatval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='minmatval_occurrence', to='gp.material')),
                ('nameval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='holderval_occurrence', to='gp.occname')),
                ('oidval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='oidval_occurrence', to='gp.occoriginalid')),
                ('sizeval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sizeval_occurrence', to='gp.occsize')),
                ('statusval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='statusval_occurrence', to='gp.occstatus')),
                ('typeval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='typeval_occurrence', to='gp.occtype')),
            ],
        ),
        migrations.CreateModel(
            name='OccurrenceAddition',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('ind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_addition', to='gp.occurrence')),
            ],
        ),
        migrations.AddField(
            model_name='occurrence',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='state_occurrence', to='gp.state'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_occurrence', to='gp.occstatus'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='typ',
            field=models.ManyToManyField(blank=True, related_name='typ_occurrence', to='gp.OccType'),
        ),
        migrations.AddField(
            model_name='occtype',
            name='simple',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_occtype', to='gp.occtypesimp'),
        ),
        migrations.AddField(
            model_name='occstatus',
            name='simple',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='simple_occstatus', to='gp.occstatussimp'),
        ),
        migrations.AddField(
            model_name='material',
            name='category',
            field=models.ManyToManyField(blank=True, related_name='category_material', to='gp.MaterialCategory'),
        ),
        migrations.CreateModel(
            name='Listed',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ticker', models.CharField(max_length=6)),
                ('user_name', models.CharField(max_length=20)),
                ('valid_instance', models.BooleanField(default=False)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('exchange', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exchange_listed', to='gp.exchange')),
            ],
        ),
        migrations.CreateModel(
            name='HolderChange',
            fields=[
                ('_id', models.IntegerField(primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=6)),
                ('field', models.CharField(max_length=30)),
                ('childperc', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('parentperc', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('user', models.CharField(max_length=20)),
                ('date_created', models.DateField()),
                ('childval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='childval_holder', to='gp.holder')),
                ('ind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_change', to='gp.holder')),
                ('listedval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='listedval_holder', to='gp.listed')),
                ('parentval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parentval_holder', to='gp.holder')),
            ],
        ),
        migrations.AddField(
            model_name='holder',
            name='children',
            field=models.ManyToManyField(blank=True, related_name='children_holder', through='gp.Parent', to='gp.Holder'),
        ),
        migrations.AddField(
            model_name='holder',
            name='listed',
            field=models.ManyToManyField(blank=True, related_name='listed_holder', to='gp.Listed'),
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
